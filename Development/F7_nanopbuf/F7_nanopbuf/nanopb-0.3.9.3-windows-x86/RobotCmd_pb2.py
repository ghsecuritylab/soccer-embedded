# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: RobotCmd.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from generator.proto import nanopb_pb2 as generator_dot_proto_dot_nanopb__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='RobotCmd.proto',
  package='',
  syntax='proto2',
  serialized_options=None,
  serialized_pb=_b('\n\x0eRobotCmd.proto\x1a\x1cgenerator/proto/nanopb.proto\"\x1f\n\x05Hello\x12\x16\n\x07message\x18\x01 \x02(\x0c\x42\x05\x92?\x02\x08+')
  ,
  dependencies=[generator_dot_proto_dot_nanopb__pb2.DESCRIPTOR,])




_HELLO = _descriptor.Descriptor(
  name='Hello',
  full_name='Hello',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='Hello.message', index=0,
      number=1, type=12, cpp_type=9, label=2,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=_b('\222?\002\010+'), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=48,
  serialized_end=79,
)

DESCRIPTOR.message_types_by_name['Hello'] = _HELLO
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Hello = _reflection.GeneratedProtocolMessageType('Hello', (_message.Message,), dict(
  DESCRIPTOR = _HELLO,
  __module__ = 'RobotCmd_pb2'
  # @@protoc_insertion_point(class_scope:Hello)
  ))
_sym_db.RegisterMessage(Hello)


_HELLO.fields_by_name['message']._options = None
# @@protoc_insertion_point(module_scope)
